version: 1
policy:
  pullRequests: public
tasks:
  $let:
    project_name: 'addon'
    deployed_python_version: 'py37'

    head_rev:
      $if: 'tasks_for == "github-pull-request"'
      then: '${event.pull_request.head.sha}'
      else:
        $if: 'tasks_for == "github-push"'
        then: '${event.after}'
        else: '${event.release.tag_name}'

    repository:
      $if: 'tasks_for == "github-pull-request"'
      then: '${event.pull_request.head.repo.html_url}'
      else: '${event.repository.html_url}'

    owner: '${event.sender.login}@users.noreply.github.com'

    push_docker_image:
      $if: 'tasks_for == "github-pull-request"'
      then: ''
      else:
        $if: 'tasks_for == "github-release" && event.repository.full_name == "mozilla-releng/${project_name}script"'
        then: '&& apk -U add jq && ./docker.d/push_image.sh'
        else:
          $if: 'tasks_for == "github-push" && event.ref in ["refs/heads/master", "refs/heads/dev", "refs/heads/stage"]'
          then: '&& apk -U add jq && ./docker.d/push_image.sh'
          else: ''

    docker_release_tag:
      $if: 'tasks_for == "github-release"'
      then: '${event.release.tag_name}'
      else: ''

    docker_tag:
      $if: 'tasks_for == "github-pull-request"'
      then: 'pull-request'
      else:
        $if: 'tasks_for == "github-release"'
        then: 'prod'
        else:
          $if: 'event.ref[0:10] == "refs/tags/"'
          then: '${event.ref[10:]}'
          else:
            $if: 'event.ref[0:11] == "refs/heads/"'
            then: '${event.ref[11:]}'
            else: '${event.ref}'

  in:
    - taskId: '${as_slugid(deployed_python_version)}'
      provisionerId: 'aws-provisioner-v1'
      workerType: 'github-worker'
      created: {$fromNow: ''}
      deadline: {$fromNow: '4 hours'}
      payload:
        maxRunTime: 3600
        image: 'python:${deployed_python_version[2]}.${deployed_python_version[3]}'
        command:
          - sh
          - -lxce
          - >-
            git clone ${repository} /src &&
            cd /src &&
            git config advice.detachedHead false &&
            git checkout ${head_rev} &&
            pip install tox &&
            tox -e ${deployed_python_version}
      metadata:
        name: 'tox ${deployed_python_version} (${docker_tag})'
        description: 'code linting & unit tests on ${deployed_python_version} (${docker_tag})'
        owner: '${owner}'
        source: '${repository}/raw/${head_rev}/.taskcluster.yml'

    - taskId: '${as_slugid("docker_build_and_push")}'
      dependencies:
        - '${as_slugid(deployed_python_version)}'
      provisionerId: 'aws-provisioner-v1'
      workerType: 'github-worker'
      created: {$fromNow: ''}
      deadline: {$fromNow: '24 hours'}
      payload:
        features:
          dind: true
          taskclusterProxy: true
        maxRunTime: 3600
        # we need to run really old docker version because taskcluster is using
        # really old version in their setup
        # image: docker:stable
        image: 'docker:1.6.2'
        env:
          SECRET_URL: 'http://taskcluster/secrets/v1/secret/project/releng/${project_name}script/deploy'
          DOCKERHUB_EMAIL: 'release+dockerhub+services@mozilla.com'
          DOCKERHUB_USER: 'mozillarelengservices'
          DOCKER_TAG: '${docker_tag}'
          DOCKER_REPO: 'mozilla/releng-${project_name}script'
          DOCKER_RELEASE_TAG: '${docker_release_tag}'
          GIT_HEAD_REV: '${head_rev}'
          PROJECT_NAME: '${project_name}'
        command:
          - sh
          - -ce
          - >-
            cd /tmp &&
            wget ${repository}/archive/${head_rev}.tar.gz &&
            tar zxf ${head_rev}.tar.gz &&
            mv ${project_name}script-${head_rev} /src &&
            cd /src &&
            docker.d/generate_version_json.sh &&
            cat version.json &&
            docker build -f Dockerfile -t $DOCKER_REPO:$DOCKER_TAG . &&
            docker save $DOCKER_REPO:$DOCKER_TAG > /tmp/image.tar
            ${push_docker_image}
        artifacts:
          public/image.tar:
            expires: {$fromNow: '8 weeks'}
            path: '/tmp/image.tar'
            type: 'file'
      scopes:
        $if: 'push_docker_image == ""'
        then: []
        else:
          - 'secrets:get:project/releng/${project_name}script/deploy'
      metadata:
        $let:
          description:
            $if: 'push_docker_image == ""'
            then: 'build docker image (${docker_tag})'
            else: 'build and push docker image (${docker_tag})'
        in:
          name: '${description}'
          description: '${description}'
          owner: '${owner}'
          source: '${repository}/raw/${head_rev}/.taskcluster.yml'
